name: Gemini Code Review

on:
  # dev 브랜치로 들어오는 Pull Request 시에만 실행
  pull_request:
    branches: [ dev ]
    types: [ opened, synchronize, reopened ]


jobs:
  code-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node
        uses: actions/setup-node@v3

      - name: Install GoogleGenerativeAI
        run: |
          npm install @google/generative-ai

      # PR 이벤트에서의 변경사항 처리
      - name: Get git diff for PR
        run: |
          git fetch origin "${{ github.event.pull_request.base.ref }}"
          git fetch origin "${{ github.event.pull_request.head.ref }}"
          git diff --unified=0 "origin/${{ github.event.pull_request.base.ref }}" > "diff.txt"
          echo "EVENT_TYPE=pull_request" >> $GITHUB_ENV

      # Gemini를 사용한 코드 분석
      - name: Run Gemini-1.5-flash
        id: gemini_review
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require("fs");
            const diff_output = fs.readFileSync("diff.txt",'utf8');

            const { GoogleGenerativeAI } = require("@google/generative-ai");
            const genAI = new GoogleGenerativeAI("${{ secrets.GEMINI_API_KEY }}");
            const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash"});            

             // 코드 리뷰 프롬프트 개선
            const prompt = `너는 시니어 소프트웨어 엔지니어로서 git diff 결과를 기반으로 코드 리뷰를 수행해야 합니다.
            
            변경된 코드를 다양한 관점에서 검토하고 개선이 필요한 부분이 있는지 알려주세요.
            git diff 결과에서 수정이 필요한 코드를 발견하면 "@@ -0,0 +0,0 @@" 부분을 참조하여 정확한 줄 번호를 계산해야 합니다.
            
            중요: 출력은 반드시 아래와 같은 유효한 JSON 배열 형식이어야 합니다. 다른 설명이나 마크다운 코드 블록(```)을 포함하지 마세요.
            
            [
              {"path":"파일경로", "line": 줄번호, "text": "리뷰 코멘트", "side": "RIGHT"},
              {"path":"파일경로", "line": 줄번호, "text": "리뷰 코멘트", "side": "RIGHT"}
            ]
            
            줄번호는 정수 값이어야 하고, JSON 형식이 정확해야 합니다. 코멘트는 한국어로 작성해 주세요. 전체 코드 변경 흐름을 파악하여 리뷰해주세요.
            
            <git diff>${diff_output}</git diff>`;

            const result = await model.generateContent(prompt);
            const response = await result.response;
            const text = response.text();
            
            fs.writeFileSync('review_result.txt', text);
            console.log('Review results saved!');

      # JSON 검증 및 정제 단계 추가
      - name: Validate and clean JSON response
        id: validate
        run: |
          # 응답 디버깅
          echo "Original response:" 
          cat review_result.txt
          
          # 마크다운 백틱 블록과 같은 요소 제거하고 JSON만 추출
          CLEANED_RESPONSE=$(cat review_result.txt | sed -E 's/^```(json)?//g' | sed -E 's/```$//g' | sed -E 's/^[^[]*(\[)/\1/g' | sed -E 's/(\]).*$/\1/g')
          echo "Cleaned response:"
          echo "$CLEANED_RESPONSE"
          
          # 유효한 JSON인지 확인
          echo "$CLEANED_RESPONSE" | jq . > /dev/null || {
            echo "Invalid JSON detected. Creating empty comment array."
            echo '[]' > validated_response.json
          }
          
          # 유효한 JSON이면 그대로 사용
          if [ $? -eq 0 ]; then
            echo "$CLEANED_RESPONSE" > validated_response.json
          fi
          
          # GitHub 출력용으로 이스케이프 처리
          COMMENT=$(cat validated_response.json | jq -c .)
          echo "comment=$COMMENT" >> $GITHUB_OUTPUT

      - name: Add Pull Request Review Comment
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.store.outputs.comment }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          allow-repeats: false
